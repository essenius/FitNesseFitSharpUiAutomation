<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UiAutomation</name>
    </assembly>
    <members>
        <member name="T:UiAutomation.Coordinate">
            <summary>Coordinate pair x,y</summary>
        </member>
        <member name="M:UiAutomation.Coordinate.#ctor(System.Int32,System.Int32)">
            <summary>Initialize coordinates with X and Y parameters</summary>
        </member>
        <member name="M:UiAutomation.Coordinate.#ctor(System.String)">
            <summary>Initialize coordinate with a string to be parsed. If empty string, will become 0,0</summary>
        </member>
        <member name="P:UiAutomation.Coordinate.X">
            <summary>X-coordinate</summary>
        </member>
        <member name="P:UiAutomation.Coordinate.Y">
            <summary>Y-coordinate</summary>
        </member>
        <member name="M:UiAutomation.Coordinate.Equals(System.Object)">
            <summary>Coordinate object is considered equal to another one if the X and Y values are equal.</summary>
        </member>
        <member name="M:UiAutomation.Coordinate.GetHashCode">
            <summary>Base hash code on the values of X and Y</summary>
        </member>
        <member name="M:UiAutomation.Coordinate.Parse(System.String)">
            <summary>Enable Coordinates to be used as parameters in fixtures</summary>
        </member>
        <member name="M:UiAutomation.Coordinate.ToString">
            <summary>Show X and Y coordinates</summary>
        </member>
        <member name="T:UiAutomation.ExtractGrid">
            <summary>Extract cell values from a grid control (Query table interface).</summary>
        </member>
        <member name="M:UiAutomation.ExtractGrid.#ctor(System.String)">
            <summary>Initialize ExtractGrid with a locator</summary>
        </member>
        <member name="M:UiAutomation.ExtractGrid.Query">
            <summary>Executes the query to extract cell values from a grid control. Returns null if not found</summary>
        </member>
        <member name="T:UiAutomation.GridItemType">
            <summary>Whether the grid item is a cell, column or row</summary>
        </member>
        <member name="F:UiAutomation.GridItemType.Cell">
            <summary>one cell in the grid</summary>
        </member>
        <member name="F:UiAutomation.GridItemType.Column">
            <summary>one column in the grid</summary>
        </member>
        <member name="F:UiAutomation.GridItemType.Row">
            <summary>one row in the grid</summary>
        </member>
        <member name="T:UiAutomation.GridItem">
            <summary>Element in a grid: cell, row, or column</summary>
        </member>
        <member name="M:UiAutomation.GridItem.#ctor(System.Int32,System.Int32)">
            <summary>Initialize GridItem with row, column</summary>
        </member>
        <member name="M:UiAutomation.GridItem.#ctor(System.String)">
            <summary>Initialize GridItem with row, column in a string</summary>
            <param name="input">"x,y" or "row x,column y" or "row x" or "column y" with x and y positive int</param>
        </member>
        <member name="P:UiAutomation.GridItem.Column">
            <summary>The column</summary>
        </member>
        <member name="P:UiAutomation.GridItem.GridItemType">
            <summary>Grid Item Type (Cell, Row or Column)</summary>
        </member>
        <member name="P:UiAutomation.GridItem.Row">
            <summary>The row</summary>
        </member>
        <member name="M:UiAutomation.GridItem.Parse(System.String)">
            <summary>The way to make the object parsable for FitSharp</summary>
        </member>
        <member name="M:UiAutomation.GridItem.ToString">
            <summary>Shown in FitNesse if returned as an object</summary>
        </member>
        <member name="M:UiAutomation.ListOfControls.DoTable">
            <summary>
                Table interface, returning the controls meeting the criteria in the provided process (by ID). If that's null, starts
                form the root element
            </summary>
        </member>
        <member name="M:UiAutomation.ListOfControls.Query">
            <summary>
                Query interface returning the controls meeting the criteria in the provided process (by ID). If that's null, starts form
                the root element
            </summary>
        </member>
        <member name="M:UiAutomation.Model.AppLauncher.#ctor(System.String)">
            <summary>
                Launch an UWB application. You can use the family name as well as the full name.
                if there are more options for full name, it will prefer the version that corresponds to the architecture
                e.g. the X64 version on X64 machines
            </summary>
            <param name="packageName">Family name or full name of the package</param>
        </member>
        <member name="M:UiAutomation.Model.Control.FindControl(System.String,UiAutomation.Model.Control)">
            <summary>
                Return a control based on a search criterion
            </summary>
            <param name="searchCriterion">the criterion (method1:locator1 &amp;&amp; method2:locator2)</param>
            <param name="window">the parent window (in case the control is the window itself)</param>
            <returns>the found control</returns>
        </member>
        <member name="M:UiAutomation.Model.ExtensionFunctions.Unpack(System.Char[])">
            <summary>
                Unpack a buffer containing potentially multiple zero-terminating strings into a list of strings
            </summary>
            <param name="buffer">the buffer containing the strings</param>
            <returns>the list of strings</returns>
        </member>
        <member name="T:UiAutomation.UiAutomationFixture">
            <summary>
                Script table interface for thick client (WinForms/WPF) testing via the UI Automation Framework.
            </summary>
            <remarks>
                Using the unmanaged API as that finds more than the managed API
                see e.g. https://social.msdn.microsoft.com/Forums/windowsdesktop/en-US/c3f142e1-0624-4ec5-a313-482e72d5454d/
                To make the constants work, set the reference property "Embed Interop Types" for interop.UIAutomationCore to False
                The dll can be generated via:
                "c:\Program Files(x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\x64\TlbImp.exe"
                c:\Windows\System32\UIAutomationCore.dll -out:interop.UIAutomationCore.dll
                Unless stated otherwise, design decisions have been made because they seemed reasonable.
            </remarks>
        </member>
        <member name="P:UiAutomation.UiAutomationFixture.ApplicationIsActive">
            <summary>Is the application under test active?</summary>
        </member>
        <member name="P:UiAutomation.UiAutomationFixture.ApplicationProcessId">
            <summary>The process Id of the currently active application under test</summary>
        </member>
        <member name="P:UiAutomation.UiAutomationFixture.TimeoutSeconds">
            <summary>Set/get the default timeout for all wait commands. Default value is 3 seconds. Max is 3600 * 24 * 24 (i.e. 24 days)</summary>
        </member>
        <member name="P:UiAutomation.UiAutomationFixture.UwpAppsAreSupported">
            <summary>Returns whether the platform supports UWP apps</summary>
        </member>
        <member name="P:UiAutomation.UiAutomationFixture.WindowSize">
            <summary>Window size (width, height) of the system under test, in pixels. 0,0 if nothing open</summary>
        </member>
        <member name="P:UiAutomation.UiAutomationFixture.WindowTopLeft">
            <summary>Coordinate (X,Y) of the top left corner of the system under test's window, in pixels. 0,0 if nothing open</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.CellInControlContaining(System.String,System.String)">
            <summary>Get the row and column of the first cell in a grid that contains the value</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ClickControl(System.String)">
            <summary>Click a clickable control (e.g. Button)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.CloseApplication">
            <summary>
                Close a running application. It does so by closing the main window. It does not force a close if warnings or
                notifications pop up (e.g. 'are you sure?')
            </summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.CollapseControl(System.String)">
            <summary>Collapse a collapsible control (e.g. TreeItem)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ColumnCountOfControl(System.String)">
            <summary>Returns the number of columns in a grid control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ControlExists(System.String)">
            <summary>Returns whether a certain control exists</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ControlIsVisible(System.String)">
            <summary>Returns whether a certain control is visible</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.DoubleClickControl(System.String)">
            <summary>Double click a control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.DragControl(System.String)">
            <summary>Drag the mouse from a control. Use together with Drop On Control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.DragControlAndDropOnControl(System.String,System.String)">
            <summary>Drag the mouse from a control and drop onto another control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.DropOnControl(System.String)">
            <summary>Drop a dragged control onto another one. Use together with Drag Control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ExpandControl(System.String)">
            <summary>Expand an expandable control (e.g. TreeItem)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.FirstTextUnder(System.String)">
            <summary>Return the content of the first text control under the current control. Useful for UWP apps</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ForcedCloseApplication">
            <summary>
                Close a running application by closing the main window. If the close does not succeed, it will try and kill the process
                (i.e. forced close)
            </summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.IsUwpApp">
            <summary>Returns whether the current application is an UWP app</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.MaximizeWindow">
            <summary>Maximize the window of the system under test</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.MinimizeWindow">
            <summary>Minimize the window of the system under test</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.MoveWindowTo(UiAutomation.Coordinate)">
            <summary>Move a window to a certain x and y position</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.NameOfControl(System.String)">
            <summary>Return the name of a control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.NoAutomaticSwitchToStartedApplication">
            <summary>
                If an application gets started, no automatic switch to the application window will be attempted. This will then need to
                be done manually with a Switch To Window command
            </summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.NormalWindow">
            <summary>'Restore' the window of the system under test</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.PressKey(System.String)">
            <summary>Use the SendKeys.SendWait method to simulate keypresses.</summary>
            <param name="key">For more details on formats see https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.sendkeys </param>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.PropertyOfControl(System.String,System.String)">
            <summary>Returns a property of a control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ResizeWindowTo(UiAutomation.Coordinate)">
            <summary>Resize a window to a certain width and height. Format: width, height</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.RowCountOfControl(System.String)">
            <summary>Returns the number of rows in a grid control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SearchBy(System.String)">
            <summary>Sets the default search method. If this command is not called, Name will be assumed</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SelectedCellInControl(System.String)">
            <summary>Get the row and column of the selected cell in a control. If multiple are selected, it returns the first only</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SelectItem(System.String)">
            <summary>Select a selectable item (e.g. RadioButton, Tab)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SetAutomaticSwitchToStartedApplication">
            <summary>Enable automatic switching to an application that gets started (default setting)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SetFocusToControl(System.String)">
            <summary>Set the focus to a control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SetValueOfControlTo(System.String,System.String)">
            <summary>Set the value of a control. Tries to use an appropriate method based on the control type</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SnapshotObjectOfControl(System.String)">
            <summary>Take a snapshot of a control on the screen and return it as a Snapshot object</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SnapshotOfControl(System.String)">
            <summary>Take a snapshot of a control on the screen and render it as an HTML base 64 image</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.StartApplication(System.String)">
            <summary>Start an executable without arguments and default working folder</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.StartApplicationWithArguments(System.String,System.String)">
            <summary>Start an executable with arguments and default working folder</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.StartApplicationWithArgumentsAndWorkingFolder(System.String,System.String,System.String)">
            <summary>Start an executable with arguments and working folder</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.StartApplicationWithWorkingFolder(System.String,System.String)">
            <summary>Start an executable without arguments, with working folder</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SwitchToParentWindow">
            <summary>Switch to the parent window of the current app (useful for UWP apps)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.SwitchToProcess(System.String)">
            <summary>Switch to a process (using either ProcessId or Name)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ToggleControl(System.String)">
            <summary>Toggles the value of a control</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.ValueOfControl(System.String)">
            <summary>Returns the value of a control. Tries to return an appropriate value based on the control type</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WaitForControl(System.String)">
            <summary>Waits for a control to appear</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WaitForControlAndClick(System.String)">
            <summary>Waits for a control to appear, and then click it</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WaitForProcess(System.String)">
            <summary>Waits for a process to become active (typically via Name, can also use ProcessId</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WaitSeconds(System.Double)">
            <summary>Wait the specified number of seconds (can be fractions)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WaitUntilControlDisappears(System.String)">
            <summary>Wait for a control to disappear</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WaitUntilProcessEnds(System.String)">
            <summary>Waits for a process to end (via ProcessId or Name)</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WindowSnapshot(System.Int32)">
            <summary>Take a snapshot of the current window removing a border width and render it as an HTML base 64 image</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WindowSnapshotMinusOuterPixels">
            <summary>Take a snapshot of the current window and render it as an HTML base 64 image</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WindowSnapshotObject">
            <summary>Take a snapshot of the current window and return it as a Snapshot object</summary>
        </member>
        <member name="M:UiAutomation.UiAutomationFixture.WindowSnapshotObjectMinusOuterPixels(System.Int32)">
            <summary>Take a snapshot of the current window removing a border width and return it as a Snapshot object</summary>
        </member>
    </members>
</doc>
